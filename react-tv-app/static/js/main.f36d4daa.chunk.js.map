{"version":3,"sources":["redux/listMovies/reducers.js","redux/reducers.js","redux/listMovies/actions.js","APIs/getMovieAPI.js","components/navBar/name/index.js","components/navBar/year/index.js","components/navBar/sort/index.js","APIs/getPicturesAPI.js","components/navBar/helpFun/getPictures.js","APIs/getSimilarMovieAPI.js","components/navBar/helpFun/getSimilar.js","components/navBar/navBar.jsx","components/navBar/index.js","components/items/pagination.jsx","components/items/movie.jsx","components/items/listMovies.jsx","components/items/index.js","App.jsx","serviceWorker.js","index.js"],"names":["defaultState","listOfMovie","listOfPictures","listOfSimilarMovie","name","years","sort","currentPage","moviePerPage","combineReducers","listOfMovies","state","action","type","payload","getListOfMovies","year","a","params","query","axios","get","headers","result","data","NavBarName","onKeyPress","this","props","onSearchClick","placeholder","React","Component","NavBarYears","className","htmlFor","onChange","getValueYears","onSearchClickYears","max","min","NavBarSort","list","onInput","onChooseInput","id","getPicturesForMovie","posters","filePath","file_path","picturesPath","console","error","getPictures","pic","item","movie","ids","tmdb","push","getSimilarMovies","results","getSimilar","sim","NavBar","bind","savePicturesInState","saveSimilarMovieInState","saveMovieList","setMovieWithAllData","pictures","setPicturesMovie","similarMovie","setListSimilarMovie","setListMovie","event","which","setName","target","value","valueLength","parseInt","length","style","color","setYears","e","setSort","listForSort","sortMethod","b","reverse","NavBarContainer","mapDispatchToProps","listMovie","pict","listSimilarMOvie","connect","Pagination","totalMovie","paginate","pageNumbers","i","Math","ceil","map","pageNumb","href","key","onClick","preventDefault","Movie","title","film","url","index","firstSimilar","secondSimilar","thridSimilar","similar","src","alt","ListMovies","currentMovies","indexOfFirstMovie","trakt","MovieContainer","indexOfLastMovie","slice","pageNumber","setCurrentPage","page","store","createStore","rootReducer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f36d4daa.chunk.js","sourcesContent":["import { \n    PUT_LIST_OF_FILM_NAME,\n    PUT_PICTURES_FOR_MOVIE,\n    PUT_SIMILAR_MOVIE,\n    PUT_YEARS_FOR_MOVIE,\n    PUT_NAME_FOR_MOVIE,\n    PUT_CHOOSE_SORT_FOR_MOVIE,\n    CHANGE_CURRENT_PAGE\n                            } from './actions'\n\nconst defaultState = {\n    listOfMovie: [],\n    listOfPictures: [],\n    listOfSimilarMovie: [],\n    name:'',\n    years: '',\n    sort: '',\n    currentPage: 1,\n    moviePerPage: 5,\n}\n\nexport const putMoviesReducers = (state = defaultState, action)=>{\n    // eslint-disable-next-line default-case\n    switch( action.type ){\n        case PUT_LIST_OF_FILM_NAME:\n            return {\n                ...state,\n                listOfMovie: action.payload,\n            }\n        // eslint-disable-next-line no-duplicate-case\n        case PUT_PICTURES_FOR_MOVIE:\n            return {\n                ...state,\n                listOfPictures: action.payload,\n            }\n        // eslint-disable-next-line no-duplicate-case\n        case PUT_SIMILAR_MOVIE:\n            return {\n                ...state,\n                listOfSimilarMovie: action.payload,\n            }\n        // eslint-disable-next-line no-duplicate-case\n        case PUT_YEARS_FOR_MOVIE:\n            return {\n            ...state,\n            years: action.payload,\n            }\n        // eslint-disable-next-line no-duplicate-case\n        case PUT_NAME_FOR_MOVIE:\n            return {\n            ...state,\n            name: action.payload,\n            }\n        // eslint-disable-next-line no-duplicate-case\n        case PUT_CHOOSE_SORT_FOR_MOVIE:\n            return {\n            ...state,\n            sort: action.payload,\n            }\n        // eslint-disable-next-line no-duplicate-case\n        case CHANGE_CURRENT_PAGE:\n            return {\n            ...state,\n            currentPage: action.payload,\n            }\n    }\n    return state;\n}","import { combineReducers } from 'redux';\nimport { putMoviesReducers } from './listMovies/reducers'\n\nexport default combineReducers({\n    listOfMovies: putMoviesReducers,\n})\n\n\n","export const PUT_LIST_OF_FILM_NAME = 'PUT_LIST_OF_FILM_NAME';\nexport const PUT_PICTURES_FOR_MOVIE = 'PUT_PICTURES_FOR_MOVIE';\nexport const PUT_SIMILAR_MOVIE = 'PUT_SIMILAR_MOVIE';\nexport const PUT_YEARS_FOR_MOVIE = 'PUT_YEARS_FOR_MOVIE';\nexport const PUT_NAME_FOR_MOVIE = 'PUT_NAME_FOR_MOVIE';\nexport const PUT_CHOOSE_SORT_FOR_MOVIE = 'PUT_CHOOSE_SORT_FOR_MOVIE';\nexport const CHANGE_CURRENT_PAGE = 'CHANGE_CURRENT_PAGE';\n\n\n\nexport const setListMovie = (listMovie)=>({\n    type: PUT_LIST_OF_FILM_NAME,\n    payload: listMovie,\n})\nexport const setPicturesMovie = (pict)=>({\n    type: PUT_PICTURES_FOR_MOVIE,\n    payload: pict,\n})\nexport const setListSimilarMovie = (listSimilarMOvie)=>({\n    type: PUT_SIMILAR_MOVIE,\n    payload: listSimilarMOvie,\n})\nexport const setYears = (year)=>({\n    type: PUT_YEARS_FOR_MOVIE,\n    payload: year,\n})\nexport const setName = (name)=>({\n    type: PUT_NAME_FOR_MOVIE,\n    payload: name,\n})\nexport const setSort = (sort)=>({\n    type: PUT_CHOOSE_SORT_FOR_MOVIE,\n    payload: sort,\n})\nexport const setCurrentPage = (page)=>({\n    type: CHANGE_CURRENT_PAGE,\n    payload: page,\n})","import axios from 'axios';\n\n\nexport async function getListOfMovies(name, year){\n    let params = {};\n    if(year){\n        params = {\n            query: `${name}`,\n            years: `${year}`\n        }\n    }else{\n        params = {\n            query: `${name}`,\n        }\n    }\n\n    const result = await axios.get('https://api.trakt.tv/search/movie/',{\n    params: params,\n    headers:{\n        \"trakt-api-key\": \"f50bcef04ebc3c6fea696a2573403d0a06b8b22ebc44ebb002f93572418bef46\",\n        \"Content-type\": \"application/json\",\n        \"trakt-api-version\": 2,\n    }\n});\nreturn result.data;\n}\n\n","import React from 'react';\n\nclass NavBarName extends React.Component{\n    render(){\n        return(\n            <input  type=\"text\" \n                        name=\"searchFilm\" \n                        onKeyPress={this.props.onSearchClick}\n                        placeholder=\"Movie title\"\n                />\n        )\n    }\n}\n\nexport default NavBarName;","import React from 'react';\n\nclass NavBarYears extends React.Component{\n    render(){\n        return(\n            <div className=\"wrapYearsForm\">\n                    <label htmlFor=\"years\">optional</label>\n                    <input type=\"number\"\n                        name=\"years\"\n                        placeholder=\"Choose the year\"\n                        onChange={this.props.getValueYears}\n                        onKeyPress={this.props.onSearchClickYears}\n                        max=\"2019\"\n                        min=\"1970\" />\n                </div>\n        )\n    }\n}\n\nexport default NavBarYears;","import React from 'react';\n\nclass NavBarSort extends React.Component{\n    render(){\n        return(\n            <div className=\"wrapSort\">\n                <label htmlFor=\"sort\">optional</label>\n                <input list=\"sortMethod\"\n                        placeholder=\"Sort\"\n                        onInput={this.props.onChooseInput}/>\n                <datalist id=\"sortMethod\">\n                    <option>By newest</option>\n                    <option>By oldest</option>\n                </datalist>\n            </div>\n        )\n    }\n}\n\nexport default NavBarSort;","import axios from 'axios';\n\n\nexport async function getPicturesForMovie(id){\nlet picturesPath ;\ntry{\n    const result = await axios\n    .get(`https://api.themoviedb.org/3/movie/${id}/images?api_key=ee05a415e10d527c5496fb485215ff75`);\n    if(result.data.posters[0]){\n        const filePath = result.data.posters[0].file_path;\n        picturesPath = `https://image.tmdb.org/t/p/w500${filePath}`;\n    }else{\n        picturesPath = ''\n    } \n}catch(e){\n    console.error(e);\n}\n\n\nreturn picturesPath;\n}","import { getPicturesForMovie } from '../../../APIs/getPicturesAPI'\n\nexport async function getPictures (result){\n    const pic = []\n    for(let item of result){\n        pic.push( await getPicturesForMovie( item.movie.ids.tmdb ));\n    }\n    return pic;\n}\n","import axios from 'axios';\n\n\nexport async function getSimilarMovies(id){\n    let result = [];\n    try{\n        result = await axios.get(\n            `https://api.themoviedb.org/3/movie/${id}/similar?api_key=ee05a415e10d527c5496fb485215ff75&page=1`\n        );\n        if(result){\n            return result.data.results;\n        }\n    }catch(e){\n        console.error(e)\n    }\n     return result;\n}\n","import { getSimilarMovies } from '../../../APIs/getSimilarMovieAPI';\n\nexport async function getSimilar (result){\n    const sim = []\n    for(let item of result){\n        sim.push( await getSimilarMovies( item.movie.ids.tmdb ));\n    }\n    return sim;\n}","import React from 'react';\nimport { getListOfMovies } from '../../APIs/getMovieAPI';\nimport NavBarName from './name';\nimport NavBarYears from './year';\nimport NavBarSort from './sort';\nimport { getPictures } from './helpFun/getPictures'\nimport { getSimilar } from './helpFun/getSimilar'\n\n\nclass NavBar extends React.Component{\nconstructor(props){\n    super(props)\n    this.onSearchClick = this.onSearchClick.bind(this);\n    this.getValueYears = this.getValueYears.bind(this);\n    this.onSearchClickYears = this.onSearchClickYears.bind(this);\n    this.onChooseInput = this.onChooseInput.bind(this);\n    this.savePicturesInState = this.savePicturesInState.bind(this);\n    this.saveSimilarMovieInState = this.saveSimilarMovieInState.bind(this);\n    this.saveMovieList = this.saveMovieList.bind(this);\n    this.setMovieWithAllData = this.setMovieWithAllData.bind(this);\n}\n\n//---------------------------------------Additional function-------------------------------------\nasync savePicturesInState(result){\n    const pictures = await getPictures(result);\n    await this.props.setPicturesMovie(pictures);\n}\n\n\nasync saveSimilarMovieInState(result){\n    const similarMovie = await getSimilar(result);\n    await this.props.setListSimilarMovie(similarMovie);\n}\n\n\nasync saveMovieList(){\n    if(this.props.state.listOfMovies.years){\n        //Code save data in state (List of MOVIE with YEAR)\n        const result = await getListOfMovies(this.props.state.listOfMovies.name, this.props.state.listOfMovies.years);\n        await this.props.setListMovie(result);\n        return result;\n    }else{\n        //Code save data in state (List of MOVIE)\n        const result = await getListOfMovies(this.props.state.listOfMovies.name);\n        await this.props.setListMovie(result);\n        return result;\n    }\n}\n\n\nasync setMovieWithAllData(){\n    const result = await this.saveMovieList();\n\n    //Code save data in state (PICTURES for movie)\n    this.savePicturesInState(result);\n        \n    //Code save data in state (List of SIMILAR movie)\n    this.saveSimilarMovieInState(result);\n}\n\n\n//---------------------------------------MAIN function-------------------------------------\nasync onSearchClick(event){\n    if(event.which === 13){\n        await this.props.setName(event.target.value);        \n        this.setMovieWithAllData();\n    }\n}\n\n\nasync getValueYears(event){\n    let valueLength = parseInt(event.target.value.length);\n\n    if(valueLength > 4){\n        event.target.style.color = '#e17055';\n\n    // eslint-disable-next-line no-cond-assign\n    }else if(valueLength < 4 && valueLength >= 1){\n        event.target.style.color = '#e17055';\n\n    // eslint-disable-next-line no-cond-assign\n    }else if(valueLength === 4){\n        event.target.style.color = '#00b894';\n        await this.props.setYears(event.target.value);\n    \n    // eslint-disable-next-line no-cond-assign\n    }else if(valueLength === 0){\n        await this.props.setYears('');\n    }\n}\n\n\nonSearchClickYears(e){\n    if(e.which === 13){\n        this.setMovieWithAllData();\n    }\n}\n\n\nasync onChooseInput(e){\n    await this.props.setSort( e.target.value );\n    const listForSort = [...this.props.state.listOfMovies.listOfMovie];\n    const sortMethod = (a, b)=>{\n        //Return by oldest\n        return( a.movie.year - b.movie.year)\n    }\n    await listForSort.sort( sortMethod );\n\n    if(this.props.state.listOfMovies.sort === 'By newest'){\n        await listForSort.reverse();\n        await this.props.setListMovie(listForSort);\n\n        //Code save data in state (PICTURES for movie)\n        this.savePicturesInState(listForSort);\n\n        //Code save data in state (List of SIMILAR movie)\n        this.saveSimilarMovieInState(listForSort);\n\n    }else if(this.props.state.listOfMovies.sort === 'By oldest'){\n        await this.props.setListMovie( listForSort );\n\n        //Code save data in state (PICTURES for movie)\n        this.savePicturesInState(listForSort);\n\n        //Code save data in state (List of SIMILAR movie)\n        this.saveSimilarMovieInState(listForSort);\n    }\n}\n\n\nrender() {\n    return(\n        <div className='setting' id=\"navBarSetting\">\n                <NavBarName onSearchClick={this.onSearchClick}/>\n                <NavBarYears getValueYears={this.getValueYears}\n                             onSearchClickYears={this.onSearchClickYears}/>\n                <NavBarSort onChooseInput={this.onChooseInput}/>\n        </div>\n    )\n}}\nexport default NavBar;","import React from 'react';\nimport { connect } from 'react-redux';\nimport NavBar from './navBar';\nimport { setListMovie, \n         setPicturesMovie, \n         setListSimilarMovie, \n         setYears, \n         setName,\n         setSort      } from '../../redux/listMovies/actions';\n\nclass NavBarContainer extends React.Component{\nrender() {\n    return(\n        <NavBar state={this.props.state}\n                setListMovie={this.props.setListMovie}\n                setPicturesMovie={this.props.setPicturesMovie} \n                setListSimilarMovie={this.props.setListSimilarMovie}\n                setYears={this.props.setYears} \n                setName={this.props.setName}\n                setSort={this.props.setSort} />\n    )\n}}\n\nconst mapStateToProps = state =>{\n    return {\n        state: state,\n    };\n};\nconst mapDispatchToProps = {\n    setListMovie,\n    setPicturesMovie,\n    setListSimilarMovie,\n    setYears,\n    setName,\n    setSort,\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps )(NavBarContainer);","import React from 'react';\n\nconst Pagination = ({ moviePerPage, totalMovie, paginate})=>{\n    const pageNumbers = [];\n\n    for(let i = 1; i <= Math.ceil(totalMovie / moviePerPage); i++){\n        pageNumbers.push(i);\n    }\n    return (\n        <div>\n            <div className=\"pagination\">\n                {pageNumbers.map( pageNumb => (\n                    <a href=\"#navBarSetting\" \n                       className=\"pageLink\" \n                       key={pageNumb}\n                       onClick={(e)=>{\n                           e.preventDefault();\n                           paginate(pageNumb)}}>\n                        {pageNumb}\n                    </a>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Pagination;","import React from 'react';\n\n\n\nconst Movie = (props)=>{\n    const title = props.film.movie.title;\n    const year = props.film.movie.year;\n    const url = props.url[props.index];\n    let firstSimilar = '';\n    let secondSimilar = '';\n    let thridSimilar = '';\n\n    if(props.similar[props.index]){\n        if(props.similar[props.index][0]){\n        firstSimilar = props.similar[props.index][0].title;\n        secondSimilar = props.similar[props.index][1].title;\n        thridSimilar = props.similar[props.index][2].title;\n        }else{\n            firstSimilar = 'Not found';\n            secondSimilar = 'Not found';\n            thridSimilar = 'Not found';\n        }\n    }\n\n    return(\n        <div className=\"OneOfMovie\">\n            <div className=\"moviePoster\">\n                <img src={url} alt='Poster for film not FOUNDED'/>\n            </div>\n            <div className=\"movieTitle\">\n                <h2>{title}</h2>\n            </div>\n            <div className=\"movieYear\">\n                <p>{year}</p>\n            </div>\n            <div className=\"Similar\">\n                <h3>Similar movies</h3>\n                <p>{firstSimilar? firstSimilar : 'Searching..'}</p>\n                <p>{secondSimilar? secondSimilar : 'Searching..'}</p>\n                <p>{thridSimilar? thridSimilar : 'Searching..'}</p>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Movie;","import React from 'react';\nimport Movie from './movie';\n\n\nconst ListMovies = ({ currentMovies, url, similar, indexOfFirstMovie }) => {\n    let index = 0;\n    let i = 0;\n    return(\n        <div>\n            {\n                currentMovies.map( film => {\n                    index = indexOfFirstMovie + i;\n                    i++;\n                    return <Movie film={film} \n                                  key={film.movie.ids.trakt}\n                                  url={url}\n                                  similar={similar}\n                                  index={index}  \n                            />\n                        })\n            }\n        </div>\n    )\n}\n\nexport default ListMovies;","import React from 'react';\nimport Pagination from './pagination.jsx'\nimport { connect } from 'react-redux';\nimport { setCurrentPage } from '../../redux/listMovies/actions'\nimport ListMovies from './listMovies';\n\nclass  MovieContainer extends React.Component{\nrender() {\n//GET CURRENT POSTS\nconst indexOfLastMovie = this.props.currentPage * this.props.moviePerPage;\nconst indexOfFirstMovie = indexOfLastMovie - this.props.moviePerPage;\nconst currentMovies = this.props.listOfMovies.slice(indexOfFirstMovie, indexOfLastMovie);\nconst paginate = (pageNumber)=>{\n    this.props.setCurrentPage(pageNumber);\n}\n\n    return(\n        <div>\n            <ListMovies currentMovies={currentMovies}\n                        url={this.props.listOfPictures}\n                        similar={this.props.listOfSimilarMovie}\n                        indexOfFirstMovie={indexOfFirstMovie}/>\n            <Pagination moviePerPage={this.props.moviePerPage}\n                        totalMovie={this.props.listOfMovies.length}\n                        paginate={paginate}/>\n        </div>\n    )\n}}\n\nconst mapStateToProps = state =>{\n    return {\n        listOfMovies: state.listOfMovies.listOfMovie,\n        listOfPictures: state.listOfMovies.listOfPictures,\n        listOfSimilarMovie: state.listOfMovies.listOfSimilarMovie,\n        currentPage: state.listOfMovies.currentPage,\n        moviePerPage: state.listOfMovies.moviePerPage\n    };\n};\nconst mapDispatchToProps = {\n    setCurrentPage\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieContainer)","import React from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './redux/reducers';\nimport NavBarContainer from './components/navBar';\nimport MovieContainer from './components/items';\n\n\nconst store = createStore(rootReducer);\n\nclass App extends React.Component{\nrender(){\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <NavBarContainer />\n        <MovieContainer />\n      </div>\n    </Provider>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}